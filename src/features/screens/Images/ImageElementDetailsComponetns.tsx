import { Box, ButtonText, ButtonIcon, Image, Heading, Button } from "@gluestack-ui/themed";
import React from "react"
import { useAppColorMode } from "../../components/ColorModeContext";
import { ExternalLink, SquarePen, GripVertical, Trash2 } from "lucide-react-native";
import { Alert, PermissionsAndroid, Platform, Share } from "react-native";
import moment from "moment";
import RNFS from "react-native-fs";
import { useAppColors } from "../../../hooks/useAppColors";

interface imagesProps {
    id: number,
    uri: string
}
interface ImageElementDetailsProps {
    onBack: () => void;
    listImage: imagesProps[]
}

const ImageElementDetailsComponetns: React.FC<ImageElementDetailsProps> = ({ onBack, listImage }) => {
    const colors = useAppColors();

    const image = "https://gluestack.github.io/public-blog-video-assets/Image%20Element.png"

    const shareImage = async () => {
        try {
            // üîπ Ki·ªÉm tra quy·ªÅn l∆∞u ·∫£nh tr√™n Android
            if (Platform.OS === "android") {
                const granted = await PermissionsAndroid.request(
                    PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE
                );
                if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
                    Alert.alert("Quy·ªÅn b·ªã t·ª´ ch·ªëi", "Vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p b·ªô nh·ªõ.");
                    return;
                }
            }

            // üîπ T·∫°o ƒë∆∞·ªùng d·∫´n l∆∞u ·∫£nh t·∫°m th·ªùi
            const fileName = `shared_image.jpg`;
            const filePath = `${RNFS.CachesDirectoryPath}/${fileName}`;

            // üîπ T·∫£i ·∫£nh v·ªÅ local
            const downloadResult = await RNFS.downloadFile({
                fromUrl: image,
                toFile: filePath
            }).promise;

            if (downloadResult.statusCode === 200) {
                // üîπ Chia s·∫ª ·∫£nh ƒë√£ t·∫£i
                await Share.share({
                    url: `file://${filePath}`, // D√πng ƒë∆∞·ªùng d·∫´n c·ª•c b·ªô
                    message: `Base React Native | Chia s·∫ª h√¨nh ·∫£nh v√†o ${moment(new Date()).format("DD/MM/YYYY HH:mm")}`,
                });
            } else {
                throw new Error("T·∫£i ·∫£nh th·∫•t b·∫°i");
            }
        } catch (e) {
            console.log(e);
            Alert.alert("L·ªói", "Kh√¥ng th·ªÉ chia s·∫ª ·∫£nh.");
        }
    };

    return (
        <Box w="$full" h="$full" bgColor={colors.background.primary}>
            <Box
                w="$full"
                h="$16"
                bgColor={colors.background.primary}
                flexDirection="row"
                alignItems="center"
                justifyContent="space-between"
                px="$4"
            >
                <Button
                    variant="link"
                    onPress={onBack}
                    w={80}
                    paddingRight={20}
                >
                    <Heading size="sm" color={colors.text.primary}>Tho√°t</Heading>
                </Button>
            </Box>

            <Image
                source={{
                    uri: image,
                }}
                alt="image"
                h={"84%"}
                w={"$full"}
                resizeMode="contain"

            />
            <Box w="$full" flexDirection="row" justifyContent="space-between" px="$0">
                <Button
                    flex={1}
                    variant="link"
                    action="secondary"
                    size="sm"
                    onPress={() => shareImage()}
                    flexDirection="column"
                    alignItems="center"
                >
                    <ButtonIcon as={ExternalLink} mb="$1" size="lg" color={colors.text.primary} />
                    <ButtonText color={colors.text.primary} size="xs">
                        Chia s·∫ª
                    </ButtonText>
                </Button>


                <Button
                    flex={1}
                    variant="link"
                    action="secondary"
                    size="sm"
                    // onPress={() => setIsOpen(false)}

                    flexDirection="column"
                    alignItems="center"
                >
                    <ButtonIcon as={SquarePen} mb="$1" size="lg" color={colors.text.primary} />
                    <ButtonText color={colors.text.primary} size="xs">
                        Ch·ªânh s·ª≠a
                    </ButtonText>
                </Button>

                <Button
                    flex={1}
                    variant="link"
                    action="secondary"
                    size="sm"
                    // onPress={() => setIsOpen(false)}
                    flexDirection="column"
                    alignItems="center"
                >
                    <ButtonIcon as={Trash2} mb="$1" size="lg" color={colors.text.primary} />
                    <ButtonText color={colors.text.primary} size="xs">
                        Xo√°
                    </ButtonText>
                </Button>

                <Button
                    flex={1}
                    variant="link"
                    action="secondary"
                    size="sm"
                    // onPress={() => setIsOpen(false)}
                    flexDirection="column"
                    alignItems="center"
                >
                    <ButtonIcon as={GripVertical} mb="$1" size="lg" color={colors.text.primary} />
                    <ButtonText color={colors.text.primary} size="xs">
                        Xem th√™m
                    </ButtonText>
                </Button>
            </Box>
        </Box>
    );
}

export default ImageElementDetailsComponetns;